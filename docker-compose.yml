version: '3.8'

# Projeto base usando https://github.com/badtuxx/giropops-monitoring/

services:
  prometheus:
    build:
      context: ./dockerfiles/prometheus
      dockerfile: Dockerfile
    container_name: monitoring-prometheus
    restart: always
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus_data:/var/lib/prometheus
    networks:
      - monitoring
    ports:
      - 9092:9090

  alertmanager:
    build:
      context: ./dockerfiles/alertmanager
      dockerfile: Dockerfile
    container_name: monitoring-alertmanager
    restart: always
    volumes:
      - ./config/alertmanager/:/etc/alertmanager/
    networks:
      - monitoring
    ports:
      - 9093:9093

  node-exporter:
    build:
      context: ./dockerfiles/node-exporter
      dockerfile: Dockerfile
    container_name: monitoring-node-exporter
    restart: always
    volumes:
      - /proc:/usr/proc
      - /sys:/usr/sys
      - /:/rootfs
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    ports:
      - 9100:9100

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter
  #   container_name: monitoring-nginx-exporter
  #   ports:
  #     - 9113:9113
  #   networks:
  #     - monitoring
  #   command:
  #     - -nginx.scrape-uri=http://nginx-web-sgce:80/metrics

  # postgres-exporter:
  #   image : prometheuscommunity/postgres-exporter
  #   container_name: monitoring-postgres-exporter
  #   ports:
  #     - 9187:9187
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://user:senha@servidor:porta/database?sslmode=disable"
  #   networks:
  #     - monitoring

  cadvisor:
    image: google/cadvisor
    container_name: monitoring-cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring
    ports:
      - 8082:8080

  grafana:
    image: grafana/grafana
    container_name: monitoring-grafana
    restart: always
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - grafana.config
    networks:
      - monitoring
    ports:
      - 3000:3000

  loki:
    image: grafana/loki:2.7.4
    container_name: monitoring-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/data:/loki
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.7.4
    container_name: monitoring-promtail
    restart: always
    volumes:
      - ./config/loki/promtail.yml:/etc/promtail/config.yml
      - volume-logs:/var/log/nginx
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring

  netdata:
    image: netdata/netdata
    container_name: monitoring-netdata
    hostname: localhost # set to fqdn of host
    ports:
      - 19999:19999
    restart: always
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    networks:
      - monitoring
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro


networks:
  monitoring:

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
  prometheus_data:
  grafana_data: